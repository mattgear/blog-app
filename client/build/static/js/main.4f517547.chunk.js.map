{"version":3,"sources":["components/Header/header.js","components/RegForm/registrationForm.js","constants/apiConstants.js","components/LoginForm/loginForm.js","components/Home/home.js","components/AlertComponent/alertComponent.js","App.js","serviceWorker.js","index.js"],"names":["withRouter","props","class","className","onClick","history","push","useState","name","email","password","confirmPassword","state","setState","handleChange","e","target","id","value","prevState","sendDetailsToServer","length","payload","axios","post","API_BASE_URL","then","response","status","localStorage","setItem","data","token","redirectToHome","showError","catch","error","console","log","updateTitle","htmlFor","type","placeholder","onChange","aria-describedby","preventDefault","style","display","successMessage","role","Home","AlertComponent","modalDisplay","toggleDisplay","closeModal","hideError","useEffect","errorMessage","aria-label","aria-hidden","App","title","updateErrorMessage","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.4f517547.chunk.js","sourcesContent":["import React from 'react';\nimport {withRouter} from 'react-router-dom';\n\nfunction Header(props) {\n    \n    const redirectToRegister = () => {\n        props.history.push('/register');\n    }\n    const redirectToLogin = () => {\n        props.history.push('/login');\n    }\n\n    return (\n        <nav class=\"navbar navbar-dark bg-primary\">\n                <div className=\"row col-12 d-flex justify-content-center text-white\">\n                    <span className=\"registerText\" onClick={() => redirectToRegister()}>Register</span> \n                </div>\n                <div className=\"row col-12 d-flex justify-content-center text-white\">\n                    <span className=\"loginText\" onClick={() => redirectToLogin()}>Login</span> \n                </div>\n        </nav>\n    )\n}\n\nexport default withRouter(Header);","import React, {useState} from 'react';\nimport axios from 'axios';\nimport { API_BASE_URL, ACCESS_TOKEN_NAME } from '../../constants/apiConstants';\nimport { withRouter } from 'react-router-dom';\n\nfunction RegistrationForm(props) {\n    const [state, setState] = useState({\n        name: \"\",\n        email: \"\",\n        password: \"\",\n        confirmPassword: \"\"\n    })\n    const handleChange = (e) => {\n        const {id, value} = e.target;\n        setState(prevState => ({\n            ...prevState,\n            [id]: value\n        }))\n    }\n    const handleSubmitClick = (e) => {\n        e.preventDefault();\n        if(state.password === state.confirmPassword) {\n            sendDetailsToServer()\n        } else {\n            props.showError('Passwords do not match');\n        }\n    }\n    const sendDetailsToServer = () => {\n        if (state.email.length && state.password.length) {\n            const payload = {\n                \"name\": state.name,\n                \"email\": state.email,\n                \"password\": state.password,\n                \"confirmPassword\": state.confirmPassword\n            }\n            axios.post(API_BASE_URL + 'register', payload)\n                .then(function (response) {\n                    if (response.status === 200) {\n                        setState(prevState => ({\n                            ...prevState,\n                            'successMessage': 'Registration successful. Redirecting to home page..'\n                        }))\n                        localStorage.setItem(ACCESS_TOKEN_NAME, response.data.token)\n                        redirectToHome();\n                        props.showError(null);\n                    } else {\n                        props.showError(\"some error occurred\");\n                    }\n                })\n                .catch(function (error) {\n                    console.log(error)\n                }); \n        } else {\n            props.showError('Please enter valid username and password');\n        }\n    }\n    const redirectToHome = () => {\n        props.updateTitle('Home');\n        props.history.push('/home');\n    }\n    const redirectToLogin = () => {\n        props.updateTitle('Login');\n        props.history.push('/login');\n    }\n\n    return (\n        <div className=\"card col-12 col-lg-4 login-card mt-2 hv-center\">\n            <form>\n            <div className=\"form-group text-left\">\n                    <label htmlFor=\"exampleInputName1\">Name</label>\n                    <input type=\"text\"\n                        className=\"form-control\"\n                        id=\"name\"\n                        placeholder=\"Enter name\"\n                        value={state.name}\n                        onChange={handleChange}\n                        />\n                </div>\n                <div className=\"form-group text-left\">\n                    <label htmlFor=\"exampleInputEmail1\">Email Address</label>\n                    <input type=\"email\"\n                        className=\"form-control\"\n                        id=\"email\"\n                        aria-describedby=\"emailHelp\"\n                        placeholder=\"Enter email\"\n                        value={state.email}\n                        onChange={handleChange}\n                        />\n                    <small id=\"emailHelp\" className=\"form-text text-muted\">We'll never share your email with anyone else.</small> \n                </div>\n                <div className=\"form-group text-left\">\n                    <label htmlFor=\"exampleInputPassword1\">Password</label>\n                    <input type=\"password\"\n                        className=\"form-control\"\n                        id=\"password\"\n                        placeholder=\"Password\"\n                        value={state.password}\n                        onChange={handleChange}\n                        />\n                </div>\n                <div className=\"form-group text-left\">\n                    <label htmlFor=\"exampleInputPassword1\">Confirm Password</label>\n                    <input type=\"password\"\n                        className=\"form-control\"\n                        id=\"confirmPassword\"\n                        placeholder=\"Confirm Password\"\n                        value={state.confirmPassword}\n                        onChange={handleChange}\n                        />\n                </div>\n                <button\n                    type=\"submit\"\n                    className=\"btn btn-primary\"\n                    onClick={handleSubmitClick}\n                >\n                    Register\n                </button>\n            </form>\n\n            <div className=\"alert alert-success mt-2\" style={{display: state.successMessage ? 'block' : 'none' }} role=\"alert\">\n                {state.successMessage}\n            </div>\n            <div className=\"mt-2\">\n                <span>Already have an account?</span>\n                <span className=\"loginText\" onClick={() => redirectToLogin()}>Login</span> \n            </div>\n        </div>\n    )\n}\n\nexport default withRouter(RegistrationForm);","export const API_BASE_URL = 'http://localhost:3000/auth/';\nexport const ACCESS_TOKEN_NAME = '';","import React, {useState} from 'react';\nimport axios from 'axios';\n\nimport {API_BASE_URL, ACCESS_TOKEN_NAME} from '../../constants/apiConstants';\nimport {withRouter} from 'react-router-dom';\n\nfunction LoginForm(props) {\n    const [state, setState] = useState({\n        email: \"\",\n        password: \"\",\n        successMessage: null\n    })\n    const handleChange = (e) => {\n        const {id, value} = e.target;\n        setState(prevState => ({\n            ...prevState,\n            [id]: value\n        }))\n    }\n    const handleSubmitClick = (e) => {\n        e.preventDefault();\n        const payload = {\n            \"email\": state.email,\n            \"password\": state.password,\n        }\n        axios.post(API_BASE_URL+'login', payload)\n            .then(function(response) {\n                if (response.status === 200) {\n                    setState(prevState => ({\n                        ...prevState,\n                        'successMessage': 'Login successful. Redirecting to homepage...'\n                    }))\n                    localStorage.setItem(ACCESS_TOKEN_NAME, response.data.token);\n                    redirectToHome();\n                    props.showError(null)\n                } else if (response.status === 204) {\n                    props.showError('Username and Password do not match');\n                } else {\n                    props.showError('Username does not exist');\n                }\n            })\n            .catch(function(error) {\n                console.log(error);\n            });\n    }\n    const redirectToHome = () => {\n        props.updateTitle('Home');\n        props.history.push('/home');\n    }\n    const redirectToRegister = () => {\n        props.history.push('/register');\n        props.updateTitle('Register');\n    }\n    return (\n        <div className=\"card col-12 col-lg-4 login-card mt-2 hv-center\">\n            <form>\n                <div className=\"form-group text-left\">\n                    <label htmlFor=\"exampleInputEmail1\">Email Address</label>\n                    <input type=\"email\"\n                        className=\"form-control\"\n                        id=\"email\"\n                        aria-describedby=\"emailHelp\"\n                        placeholder=\"Enter email\"\n                        value={state.email}\n                        onChange={handleChange}\n                        />\n                    <small id=\"emailHelp\" className=\"form-text text-muted\">We'll never share your email with anyone else.</small> \n                </div>\n                <div className=\"form-group text-left\">\n                    <label htmlFor=\"exampleInputPassword1\">Password</label>\n                    <input type=\"password\"\n                        className=\"form-control\"\n                        id=\"password\"\n                        placeholder=\"Password\"\n                        value={state.password}\n                        onChange={handleChange}\n                        />\n                </div>\n                <button\n                    type=\"submit\"\n                    className=\"btn btn-primary\"\n                    onClick={handleSubmitClick}\n                >\n                    Login\n                </button>\n            </form>\n            <div className=\"alert alert-success mt-2\" style={{display: state.successMessage ? 'block' : 'none' }} role=\"alert\">\n                {state.successMessage}\n            </div>\n            <div className=\"registerMessage\">\n                <span>Dont have an account?</span>\n                <span className=\"loginText\" onClick={() => redirectToRegister()}>Register</span> \n            </div>\n        </div>\n    )\n}\n\nexport default withRouter(LoginForm);","import React from 'react';\nfunction Home(props) {\n    return(\n        <div className=\"mt-2\">\n            Home page content\n        </div>\n    )\n}\n\nexport default Home;","import React, {useState, useEffect} from 'react';\nimport './alertComponent.css';\n\nfunction AlertComponent(props) {\n    const [modalDisplay, toggleDisplay] = useState('none');\n    const openModal = () => {\n        toggleDisplay('block');\n    }\n    const closeModal = () => {\n        toggleDisplay('none');\n        props.hideError(null);\n    }\n    useEffect(() => {\n        if (props.errorMessage !== null) {\n            openModal()\n        } else {\n            closeModal()\n        }\n    });\n\n    return(\n        <div className={\"alert alert-danger alert-dismissable mt-4\"}\n            role=\"alert\"\n            id=\"alertPopUp\"\n            style={{ display: modalDisplay }}\n        >\n            <div className=\"d-flex alertMessage\">\n                <span>{props.errorMessage}</span>\n                <button type=\"button\" className=\"close\" aria-label=\"Close\" onClick={() => closeModal()}>\n                    <span aria-hidden=\"true\">&times;</span>\n                </button>\n            </div>\n        </div>\n    )\n}\n\nexport default AlertComponent;","import React, {Component, useState} from 'react';\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nimport axios from 'axios';\n\nimport Header from './components/Header/header';\nimport RegistrationForm from './components/RegForm/registrationForm';\nimport LoginForm from './components/LoginForm/loginForm';\nimport Home from './components/Home/home';\nimport AlertComponent from './components/AlertComponent/alertComponent';\n\nfunction App(){\n  const [title, updateTitle] = useState(null);\n  const [errorMessage, updateErrorMessage] = useState(null);\n\n  return (\n    <Router>\n    <div className=\"App\">\n      <Header title={title}/>\n      <div className=\"container d-flex align-items-center flex-column\">\n        <Switch>\n          <Route path=\"/\" exact={true}>\n            <Home />\n          </Route>\n          <Route path=\"/register\" exact={true}>\n            <RegistrationForm showError={updateErrorMessage} updateTitle={updateTitle}/>\n          </Route>\n          <Route path=\"/login\" exact={true}>\n            <LoginForm showError={updateErrorMessage} updateTitle={updateTitle}/>\n          </Route>\n          <Route path=\"/home\" exact={true}>\n            <Home />\n          </Route>\n        </Switch>\n        <AlertComponent errorMessage={errorMessage} hideError={updateErrorMessage}/>\n      </div>\n    </div>\n    </Router>\n  );\n}\n\n/*\nclass App extends Component {\n  state = {\n    response: {}\n  };\n\n  componentDidMount() {\n    axios.get('/api/v1/say-something').then((res) => {\n      const response = res.data;\n      this.setState({response});\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Hello from the frontend!</h1>\n        <h1>{this.state.response.body}</h1>\n      </div>\n    );\n  }\n}\n*/\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}